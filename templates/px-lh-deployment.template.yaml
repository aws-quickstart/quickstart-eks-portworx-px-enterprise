AWSTemplateFormatVersion: "2010-09-09"
Description: "deploy portworx lighthouose"
Parameters:
  KubeManifestLambdaArn:
    Type: String
  KubeConfigPath:
    Type: String
  KubeConfigKmsContext:
    Type: String
    Default: "EKSQuickStart"
  LightHouseVersion:
    Type: String
    Default: "2.0.1"
Resources:
  # This resource creates a ConfigMap in the target cluster. It retrieves and decrypts a kms encrypted
  # kubernetes config file, which is automatically created when customers deploy an EKS cluster with the quickstart,
  # for bring-your-own-cluster the customer must encrypt and upload a config file prior to launching the stack.
  #
  # The "Manifest" property is an exact representation of a regular kubernetes resource manifest, on stack create
  # `kubectl create --save-config` is called, on stack update `kubectl apply` and on stack delete `kubectl delete`
  #
  # The following elements are available to be used in other cloudformation resources using !GetAtt:
  # name, namespace, resourceVersion, selfLink, uid
  KubeManifestPortworxLhDeployment:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Version of the UI
      LightHouseVersion: !Ref LightHouseVersion
      # Kubernetes manifest
      Manifest:
        apiVersion: apps/v1beta2
        kind: Deployment
        metadata:
          name: px-lighthouse
          namespace: kube-system
          labels:
            tier: px-web-console
        spec:
          replicas: 1
          strategy:
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 1
            type: RollingUpdate
          selector:
            matchLabels:
              tier: px-web-console
          template:
            metadata:
              labels:
                tier: px-web-console
            spec:
              initContainers:
              - name: config-init
                image: portworx/lh-config-sync:0.2
                imagePullPolicy: Always
                args:
                - "init"
                volumeMounts:
                - name: config
                  mountPath: /config/lh
              containers:
              - name: px-lighthouse
                image: !Join [ ":", [ "portworx/px-lighthouse", !Ref LightHouseVersion ] ]
                imagePullPolicy: Always
                ports:
                - containerPort: 80
                - containerPort: 443
                volumeMounts:
                - name: config
                  mountPath: /config/lh
              - name: config-sync
                image: portworx/lh-config-sync:0.2
                imagePullPolicy: Always
                args:
                - "sync"
                volumeMounts:
                - name: config
                  mountPath: /config/lh
              serviceAccountName: px-lh-account
              volumes:
              - name: config
                emptyDir: {}
Outputs:
  # Examples for using the outputs of the KubeManifestExample resource
  ExampleUid:
    Value: !GetAtt KubeManifestPortworxLhDeployment.uid
  ExampleSelfLink:
    Value: !Ref KubeManifestPortworxLhDeployment
