AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Postgres using portwox volume"
Parameters:
  KubeManifestLambdaArn:
    Type: String
  KubeConfigPath:
    Type: String
  KubeConfigKmsContext:
    Type: String
    Default: "EKSQuickStart"
  PostgresContainerVersion:
    Type: String
    Default: "postgres:10.1"
  PostgresContainerPort:
    Type: Number
    Default: 5432
Resources:
  # This resource creates a ConfigMap in the target cluster. It retrieves and decrypts a kms encrypted
  # kubernetes config file, which is automatically created when customers deploy an EKS cluster with the quickstart,
  # for bring-your-own-cluster the customer must encrypt and upload a config file prior to launching the stack.
  #
  # The "Manifest" property is an exact representation of a regular kubernetes resource manifest, on stack create
  # `kubectl create --save-config` is called, on stack update `kubectl apply` and on stack delete `kubectl delete`
  #
  # The following elements are available to be used in other cloudformation resources using !GetAtt:
  # name, namespace, resourceVersion, selfLink, uid
  KubeManifestPortworxPostgresDeployment:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      PostgresContainerVersion: !Ref PostgresContainerVersion
      PostgresContainerPort: !Ref PostgresContainerPort
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: postgres
        spec:
          template:
            metadata:
              labels:
                app: postgres
            spec:
              schedulerName: stork
              containers:
              - image: "${PostgresContainerVersion}"
                name: postgres
                envFrom:
                - configMapRef:
                    name: example-config
                ports:
                - containerPort: ${PostgresContainerPort}
                  name: postgres
                volumeMounts:
                - name: postgres-data
                  mountPath: /var/lib/postgresql/data
              volumes:
              - name: postgres-data
                persistentVolumeClaim:
                  claimName: postgres-data
Outputs:
  # Examples for using the outputs of the KubeManifestExample resource
  PostgresDeploymentUid:
    Value: !GetAtt KubeManifestPortworxPostgresDeployment.uid
  PostgresDeploymentSelfLink:
    Value: !Ref KubeManifestPortworxPostgresDeployment