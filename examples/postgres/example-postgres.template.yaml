AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys Postgres using Portworx Volumes
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: KubeManifestConfig
      Parameters:
      - KubeManifestLambdaArn
      - KubeConfigPath
      - KubeConfigKmsContext
    - Label:
        default: AWS Quick Start Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    - Label:
        default: Portworx Database Configuration
      Parameters:
      - PostgresContainerVersion
      - PostgresContainerPort
      - PostgresPVCSize
      - PortworxReplicationLevel
    ParameterLabels:
      KubeManifestLambdaArn:
        default: The KubeManifest Lambda Arn used to interact with the EKS Cluster
      KubeConfigPath:
        default: The s3 path to the KubeConfig.
      KubeConfigKmsContext:
        default: The KMS context used to access the KubeConfig
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key prefix
      PostgresContainerVersion:
        default: Container Image to use for Portworx
      PostgresContainerPort:
        default: Container port for Postgres container
      PostgresPVCSize:
        default: The Volume size in Gi for Postgres.
      PortworxReplicationLevel:
        default: Replication level of Portworx volume
Parameters:
  KubeManifestLambdaArn:
    Description: The AWS kubectl Lamnda Arn used to interact with the EKS Cluster
    Type: String
  KubeConfigPath:
    Description: The s3 path to the KubeConfig.
    Type: String
  KubeConfigKmsContext:
    Description: The KMS context used to access the KubeConfig.
    Type: String
    Default: "EKSQuickStart"
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: quickstart-eks-portworx
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: examples/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  PostgresContainerVersion:
    Type: String
    Default: "postgres:10.1"
  PostgresContainerPort:
    Type: Number
    Default: 5432
  PostgresPVCSize:
    Type: String
    Default: "5Gi"
  PortworxReplicationLevel:
    Type: String
    Default: "1"
Resources:
  PostgresStorageClassStack:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Replication level for PVCs using this storage class
      PortworxReplicationLevel: !Ref PortworxReplicationLevel
      # Kubernetes manifest
      Manifest: !Sub |
        kind: StorageClass
        apiVersion: storage.k8s.io/v1beta1
        metadata:
            name: px-postgres-sc
        provisioner: kubernetes.io/portworx-volume
        parameters:
           repl: '${PortworxReplicationLevel}'
  PostgresPVCStack:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Size of PVC used by Postgres
      PostgresPVCSize: !Ref PostgresPVCSize
      # Kubernetes manifest
      Manifest: !Sub |
        kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
           name: postgres-data
           annotations:
             volume.beta.kubernetes.io/storage-class: px-postgres-sc
        spec:
           accessModes:
             - ReadWriteOnce
           resources:
             requests:
               storage: '${PostgresPVCSize}'
  PostgresConfigMapStack:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: example-config
        data:
          EXAMPLE_DB_HOST: postgres://postgres@postgres/example?sslmode=disable
          EXAMPLE_DB_KIND: postgres
          PGDATA: /var/lib/postgresql/data/pgdata
          POSTGRES_USER: postgres
  PostgresDeploymentStack:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      PostgresContainerVersion: !Ref PostgresContainerVersion
      PostgresContainerPort: !Ref PostgresContainerPort
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: postgres
        spec:
          template:
            metadata:
              labels:
                app: postgres
            spec:
              schedulerName: stork
              containers:
              - image: "${PostgresContainerVersion}"
                name: postgres
                envFrom:
                - configMapRef:
                    name: example-config
                ports:
                - containerPort: ${PostgresContainerPort}
                  name: postgres
                volumeMounts:
                - name: postgres-data
                  mountPath: /var/lib/postgresql/data
              volumes:
              - name: postgres-data
                persistentVolumeClaim:
                  claimName: postgres-data
Outputs:
  PostgresDeploymentUid:
    Value: !GetAtt PostgresDeploymentStack.uid
