AWSTemplateFormatVersion: "2010-09-09"
Description: "deploy pvc controller"
Parameters:
  KubeManifestLambdaArn:
    Type: String
  KubeConfigPath:
    Type: String
  KubeConfigKmsContext:
    Type: String
    Default: "EKSQuickStart"
  KubernetesEKSVersion:
    Type: String
    Default: "v1.11.0"
Resources:
  # This resource creates a ConfigMap in the target cluster. It retrieves and decrypts a kms encrypted
  # kubernetes config file, which is automatically created when customers deploy an EKS cluster with the quickstart,
  # for bring-your-own-cluster the customer must encrypt and upload a config file prior to launching the stack.
  #
  # The "Manifest" property is an exact representation of a regular kubernetes resource manifest, on stack create
  # `kubectl create --save-config` is called, on stack update `kubectl apply` and on stack delete `kubectl delete`
  #
  # The following elements are available to be used in other cloudformation resources using !GetAtt:
  # name, namespace, resourceVersion, selfLink, uid
  KubeManifestPortworxPVCControllerDeployment:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # k8s version
      KubernetesEKSVersion: !Ref KubernetesEKSVersion
      # Kubernetes manifest
      Manifest:
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          annotations:
            scheduler.alpha.kubernetes.io/critical-pod: ""
          labels:
            tier: control-plane
          name: portworx-pvc-controller
          namespace: kube-system
        spec:
          replicas: 3
          strategy:
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 1
            type: RollingUpdate
          template:
            metadata:
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ""
              labels:
                name: portworx-pvc-controller
                tier: control-plane
            spec:
              containers:
              - command:
                - kube-controller-manager
                - --leader-elect=true
                - --address=0.0.0.0
                - --controllers=persistentvolume-binder,persistentvolume-expander
                - --use-service-account-credentials=true
                - --leader-elect-resource-lock=configmaps
                image: !Join [ ":", [ "gcr.io/google_containers/kube-controller-manager-amd64", !Ref KubernetesEKSVersion] ]
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    host: 127.0.0.1
                    path: /healthz
                    port: 10252
                    scheme: HTTP
                  initialDelaySeconds: 15
                  timeoutSeconds: 15
                name: portworx-pvc-controller-manager
                resources:
                  requests:
                    cpu: 200m
              hostNetwork: true
              affinity:
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    - labelSelector:
                        matchExpressions:
                          - key: "name"
                            operator: In
                            values:
                            - portworx-pvc-controller
                      topologyKey: "kubernetes.io/hostname"
              serviceAccountName: portworx-pvc-controller-account
Outputs:
  # Examples for using the outputs of the KubeManifestExample resource
  ExampleUid:
    Value: !GetAtt KubeManifestPortworxPVCControllerDeployment.uid
  ExampleSelfLink:
    Value: !Ref KubeManifestPortworxPVCControllerDeployment