AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys Cassandra using Portworx Volumes
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: KubeManifestConfig
      Parameters:
      - KubeManifestLambdaArn
      - KubeConfigPath
      - KubeConfigKmsContext
    - Label:
        default: PortworxDatabaseConfig
      Parameters:
      - PortworxReplicationLevel
      - PortworxIOPriority
      - PortworxGroup
      - PortworxStorageSize
      - CassandraPort
      - CassandraContainerImage
    - Label:
        default: AWS Quick Start Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    ParameterLabels:
      KubeManifestLambdaArn:
        default: The KubeManifest Lambda Arn used to interact with the EKS Cluster
      KubeConfigPath:
        default: The s3 path to the KubeConfig.
      KubeConfigKmsContext:
        default: The KMS context used to access the KubeConfig
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      PortworxReplicationLevel:
        Default: Replication level of the Portworx volume
      PortworxIOPriority:
        Default: IO Priority of the volume's IO (high/medium/low)
      PortworxGroup:
        Default: The Cassandra volume group name
      CassandraPort:
        Default: The port cassandra container listens on.
      CassandraContainerImage:
        Default: The container image used for Cassandra
      PortworxStorageSize:
        Default: The storage size of each cassandra node's volume.
Parameters:
  KubeManifestLambdaArn:
    Description: The AWS kubectl Lamnda Arn used to interact with the EKS Cluster
    Type: String
  KubeConfigPath:
    Description: The s3 path to the KubeConfig.
    Type: String
  KubeConfigKmsContext:
    Description: The KMS context used to access the KubeConfig.
    Type: String
    Default: "EKSQuickStart"
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: quickstart-eks-portworx
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: examples/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  PortworxReplicationLevel:
    Type: String
    Default: "3"
    Description: Replication level of the Portworx volume
  PortworxIOPriority:
    Type: String
    Default: "high"
    Description: IO Priority of the volume's IO (high/medium/low)
  PortworxGroup:
    Type: String
    Default: "cassandra_vg"
    Description: The Cassandra volume group name
  CassandraPort:
    Type: Number
    Default: 9042
    Description: The port cassandra container listens on.
  PortworxStorageSize:
    Type: String
    Default: "10Gi"
    Description: The storage size of each cassandra node's volume.
  CassandraContainerImage:
    Type: String
    Default: "gcr.io/google-samples/cassandra:v12"
    Description: The container image used for Cassandra
Resources:
  CassandraStorageClassStack:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Replication level for PVCs using this storage class
      PortworxReplicationLevel: !Ref PortworxReplicationLevel
      # Snapshot Schedule
      PortworxGroup: !Ref PortworxGroup
      # IO Porfile
      PortworxIOPriority: !Ref PortworxIOPriority
      # Kubernetes manifest
      Manifest: !Sub |
        kind: StorageClass
        apiVersion: storage.k8s.io/v1
        metadata:
          name: px-cassandra-storageclass
        provisioner: kubernetes.io/portworx-volume
        parameters:
          repl: '${PortworxReplicationLevel}'
          priority_io: '${PortworxIOPriority}'
          group: '${PortworxGroup}'
  CassandraServiceStack:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Size of PVC used by MySQL
      CassandraPort: !Ref CassandraPort
      # Kubernetes manifest
      Manifest: 
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            app: cassandra
          name: cassandra
        spec:
          clusterIP: None
          ports:
            - port: !Sub ${CassandraPort}
          selector:
            app: cassandra
  CassandraStatefulSetStack:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      PortworxStorageSize: !Ref PortworxStorageSize
      CassandraContainerImage: !Ref CassandraContainerImage
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: "apps/v1beta1"
        kind: StatefulSet
        metadata:
          name: cassandra
        spec:
          serviceName: cassandra
          replicas: 3
          template:
            metadata:
              labels:
                app: cassandra
            spec:
              # Use the stork scheduler to enable more efficient placement of the pods
              schedulerName: stork
              containers:
              - name: cassandra
                image: "${CassandraContainerImage}"
                imagePullPolicy: Always
                ports:
                - containerPort: 7000
                  name: intra-node
                - containerPort: 7001
                  name: tls-intra-node
                - containerPort: 7199
                  name: jmx
                - containerPort: 9042
                  name: cql
                securityContext:
                  capabilities:
                    add:
                      - IPC_LOCK
                lifecycle:
                  preStop:
                    exec:
                      command: ["/bin/sh", "-c", "PID=$(pidof java) && kill $PID && while ps -p $PID > /dev/null; do sleep 1; done"]
                env:
                  - name: MAX_HEAP_SIZE
                    value: 1024M
                  - name: HEAP_NEWSIZE
                    value: 500M
                  - name: CASSANDRA_SEEDS
                    value: "cassandra-0.cassandra.default.svc.cluster.local"
                  - name: CASSANDRA_CLUSTER_NAME
                    value: "K8Demo"
                  - name: CASSANDRA_DC
                    value: "DC1-K8Demo"
                  - name: CASSANDRA_RACK
                    value: "Rack1-K8Demo"
                  - name: CASSANDRA_AUTO_BOOTSTRAP
                    value: "false"
                  - name: POD_IP
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
                  - name: POD_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                readinessProbe:
                  exec:
                    command:
                    - /bin/bash
                    - -c
                    - /ready-probe.sh
                  initialDelaySeconds: 15
                  timeoutSeconds: 5
                # These volume mounts are persistent. They are like inline claims,
                # but not exactly because the names need to match exactly one of
                # the stateful pod volumes.
                volumeMounts:
                - name: cassandra-data
                  mountPath: /cassandra_data
          # These are converted to volume claims by the controller
          # and mounted at the paths mentioned above.
          volumeClaimTemplates:
          - metadata:
              name: cassandra-data
              annotations:
                volume.beta.kubernetes.io/storage-class: px-cassandra-storageclass
            spec:
              accessModes: [ "ReadWriteOnce" ]
              resources:
                requests:
                  storage: '${PortworxStorageSize}'
Outputs:
  CassandraStatefulSetStackUid:
    Value: !GetAtt CassandraStatefulSetStack.uid
