AWSTemplateFormatVersion: "2010-09-09"
Description: "deploy portwox service account"
Parameters:
  KubeManifestLambdaArn:
    Type: String
  HelmLambdaArn:
    Type: String
  KubeConfigPath:
    Type: String
  KubeConfigKmsContext:
    Type: String
    Default: "EKSQuickStart"
  PortworxReplicationLevel:
    Type: String
    Default: "2"
  PortworxSnapshotSchedule:
    Type: String
    Default: periodic=60,10
  PortworxIoProfile:
    Type: String
    Default: db
Resources:
  # This resource creates a ConfigMap in the target cluster. It retrieves and decrypts a kms encrypted
  # kubernetes config file, which is automatically created when customers deploy an EKS cluster with the quickstart,
  # for bring-your-own-cluster the customer must encrypt and upload a config file prior to launching the stack.
  #
  # The "Manifest" property is an exact representation of a regular kubernetes resource manifest, on stack create
  # `kubectl create --save-config` is called, on stack update `kubectl apply` and on stack delete `kubectl delete`
  #
  # The following elements are available to be used in other cloudformation resources using !GetAtt:
  # name, namespace, resourceVersion, selfLink, uid
  KubeManifestPortworxMySQLStorageClass:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      # The lambda function that executes the manifest against the cluster. This is created in one of the parent stacks
      ServiceToken: !Ref KubeManifestLambdaArn
      # S3 path to the encrypted config file eg. s3://my-bucket/kube/config.encrypted
      KubeConfigPath: !Ref KubeConfigPath
      # context for KMS to use when decrypting the file
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      # Replication level for PVCs using this storage class
      PortworxReplicationLevel: !Ref PortworxReplicationLevel
      # Snapshot Schedule
      PortworxSnapshotSchedule: !Ref PortworxSnapshotSchedule
      # IO Porfile
      PortworxIoProfile: !Ref PortworxIoProfile
      # Kubernetes manifest
      Manifest:
        kind: StorageClass
        apiVersion: storage.k8s.io/v1beta1
        metadata:
            name: mysql-tester-class
        provisioner: kubernetes.io/portworx-volume
        parameters:
           repl: !Sub '${PortworxReplicationLevel}'
           io_profile: !Sub '${PortworxIoProfile}'
           snap_schedule: !Sub '${PortworxSnapshotSchedule}'
Outputs:
  # Examples for using the outputs of the KubeManifestExample resource
  MySQLStorageClassUid:
    Value: !GetAtt KubeManifestPortworxMySQLStorageClass.uid
  MySQLStorageClassSelfLink:
    Value: !Ref KubeManifestPortworxMySQLStorageClass
